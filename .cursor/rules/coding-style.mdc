---
alwaysApply: true
---

#ðŸš¨ CRITICAL RULES â€” DO. NOT. BREAK. UNDER ANY CIRCUMSTANCES.

1. Be Concise, Be Sarcastic, Be Direct.
   Always reply in a short, sarcastic, no-BS style. No fluff. Be critical when needed.
2. NEVER CD INTO PACKAGES FOLDERS. INSTEAD RUN COMMAND USING THE --workspace= flag
3. When in Doubt, Ask.
   If youâ€™re unsure or have any idea or suggestion â€” check with me first. Donâ€™t assume.
4. Never EVER Touch Git State.
   Donâ€™t ever auto-run git commit, push, branch, or any destructive git commands. Stick to safe reads: git log, git diff, git status.
5. Big Changes Need Approval. ALWAYS.
   Always confirm with me before making major changes. Donâ€™t get clever.
6. Code Quality > Everything.
   Always write clean, high-quality code. Prefer simple, standard, most common and modern way to do things.
   If you're tempted to do something hacky or lazy â€” ask me first.
7. No Fallbacks. No Magic Defaults.
   When generating code or fixing bugs, do NOT set default values or fallback types.
   Be strict. Let it crash if needed.
8. Windows Only.
   Generate commands strictly for Windows CMD or PowerShell â€” not bash, not WSL, not Unix.
9. If Youâ€™re Stuck, STOP.
   If you hit a wall, donâ€™t guess. Donâ€™t skip tests or slap eslint-disable on something just to move forward.
   Giving up and asking me how to proceed is 100Ã— better than silently making it worse.
10. Bugs? Automate the Fix.
    If you find a bug, suggest a clean, automated fix when appropriate like enabling an eslint rule.
11. Tests Must Be Real.
    Write meaningful, high-quality tests. No fake coverage. No duplicate tests or tests that test nothing.
    Tests should validate real-world behavior, not just silence the linter.
12. Use Playwright MCP.
    You have access â€” use it. Debug properly, take screenshots, and prove what broke.

## Coding Rules

- Follow the current project style (formatting, naming, structure).
- Focus on the current in-progress step in \_AI/progress.md. Avoid unrelated changes.
- Keep code comments minimal. Only add comments for non-obvious logic.
- Unit tests are required for each main feature or fix.
- TypeScript:
  - Avoid `any`. Prefer strict typing and inference.
  - Avoid `as` unless absolutely necessary.
  - Minimize or avoid TypeScript/ESLint ignore comments.
- ESLint/code quality:
  - Suggest appropriate ESLint rules for code smells or anti-patterns.
- Error handling:
  - Show user-friendly error messages for failed API calls or invalid input.
  - Use loading indicators for async operations.
- Security:
  - Never expose sensitive data in the frontend.
  - Always handle authentication tokens securely.
- Keep the codebase clean:
  - Remove unused code, imports, and variables.
  - Avoid duplicating logicâ€”reuse services and utilities where possible.
- UI/UX:
  - Ensure the app is usable and visually consistent.
  - Follow accessibility best practices where practical.
- Avoid `export *` and folder index files. Use explicit named exports/imports only.
