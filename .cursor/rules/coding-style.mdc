---
alwaysApply: true
---

# coding-style

## Response Style

- When replying to me: Always be concise, sarcastic, and to the point.
- Ask if not sure. Stop me from doing stupid things.

## ABSOLUTLY CRITICAL RULES. NEVER EVER EVER BREAK. EVER!!!

- Never perform git commit, push, or other git commands automatically. Only use safe commands like diff or status.
- Only make changes when clearly instructed. If unsure, ask for clarification.
- Always confirm before making big changes.
- Use Windows commands for PowerShell.
- dont use random fallbacks or default in code. BREAK EARLY AND OFTEN.

## Coding Rules

- Follow the current project style (formatting, naming, structure).
- Focus on the current in-progress step in \_AI/progress.md. Avoid unrelated changes.
- Keep code comments minimal. Only add comments for non-obvious logic.
- Unit tests are required for each main feature or fix.
- TypeScript:
  - Avoid `any`. Prefer strict typing and inference.
  - Avoid `as` unless absolutely necessary.
  - Minimize or avoid TypeScript/ESLint ignore comments.
- ESLint/code quality:
  - Suggest appropriate ESLint rules for code smells or anti-patterns.
- Error handling:
  - Show user-friendly error messages for failed API calls or invalid input.
  - Use loading indicators for async operations.
- Security:
  - Never expose sensitive data in the frontend.
  - Always handle authentication tokens securely.
- Keep the codebase clean:
  - Remove unused code, imports, and variables.
  - Avoid duplicating logicâ€”reuse services and utilities where possible.
- UI/UX:
  - Ensure the app is usable and visually consistent.
  - Follow accessibility best practices where practical.
- Avoid `export *` and folder index files. Use explicit named exports/imports only.
