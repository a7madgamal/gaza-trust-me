# Backend Dockerfile for Gazaconfirm Platform
# Note: This should be built from the project root with: docker build -f packages/backend/Dockerfile .

FROM node:22-alpine AS base

# Install dependencies only
FROM base AS deps
WORKDIR /app/packages/backend

# Copy package.json first for better layer caching
COPY packages/backend/package.json ./
RUN npm install --omit=dev --ignore-scripts && npm cache clean

# Build backend
FROM base AS builder
WORKDIR /app

# Install build tools and Supabase CLI (ONLY HERE)
RUN apk add --no-cache curl && \
    curl -fsSL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | tar -xz && \
    mv supabase /usr/local/bin/supabase && \
    chmod +x /usr/local/bin/supabase

# Copy package.json first for better caching
COPY packages/backend/package.json ./packages/backend/
WORKDIR /app/packages/backend
RUN npm install --ignore-scripts

# Copy source code
COPY packages/backend ./
WORKDIR /app/packages/backend

# Copy env file and build backend
COPY packages/backend/.env-prod .env-prod
RUN set -a && . ./.env-prod && set +a && \
    echo "🔍 Verifying all required environment variables..." && \
    echo "Checking SUPABASE_ACCESS_TOKEN: ${SUPABASE_ACCESS_TOKEN:0:10}..." && \
    test -n "$SUPABASE_ACCESS_TOKEN" || (echo "❌ SUPABASE_ACCESS_TOKEN not set!" && exit 1) && \
    test -n "$SUPABASE_URL" || (echo "❌ SUPABASE_URL not set!" && exit 1) && \
    test -n "$SUPABASE_DB_URL" || (echo "❌ SUPABASE_DB_URL not set!" && exit 1) && \
    test -n "$SUPABASE_PUBLISHABLE_KEY" || (echo "❌ SUPABASE_PUBLISHABLE_KEY not set!" && exit 1) && \
    test -n "$SUPABASE_SECRET_KEY" || (echo "❌ SUPABASE_SECRET_KEY not set!" && exit 1) && \
    test -n "$SUPABASE_JWT_SECRET" || (echo "❌ SUPABASE_JWT_SECRET not set!" && exit 1) && \
    test -n "$FRONTEND_URL" || (echo "❌ FRONTEND_URL not set!" && exit 1) && \
    test -n "$JWT_SECRET" || (echo "❌ JWT_SECRET not set!" && exit 1) && \
    test -n "$LOG_LEVEL" || (echo "❌ LOG_LEVEL not set!" && exit 1) && \
    test -n "$RATE_LIMIT_WINDOW_MS" || (echo "❌ RATE_LIMIT_WINDOW_MS not set!" && exit 1) && \
    test -n "$RATE_LIMIT_MAX_REQUESTS" || (echo "❌ RATE_LIMIT_MAX_REQUESTS not set!" && exit 1) && \
    test -n "$MAX_FILE_SIZE" || (echo "❌ MAX_FILE_SIZE not set!" && exit 1) && \
    test -n "$ALLOWED_FILE_TYPES" || (echo "❌ ALLOWED_FILE_TYPES not set!" && exit 1) && \
    test -n "$MAX_FILES_PER_CASE" || (echo "❌ MAX_FILES_PER_CASE not set!" && exit 1) && \
    test -n "$ENABLE_EMAIL_VERIFICATION" || (echo "❌ ENABLE_EMAIL_VERIFICATION not set!" && exit 1) && \
    echo "✅ All environment variables verified successfully!" && \
    npm run clean && npm run build

# Production image
FROM base AS runner
WORKDIR /app

# Install tini for proper signal handling
RUN apk add --no-cache tini

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 backend

# Copy Supabase CLI from builder (no more downloads!)
COPY --from=builder /usr/local/bin/supabase /usr/local/bin/supabase

# Copy built application and dependencies with proper ownership
COPY --from=builder --chown=backend:nodejs /app/packages/backend/dist ./dist/
COPY --from=deps --chown=backend:nodejs /app/packages/backend/node_modules ./node_modules/
COPY --from=builder --chown=backend:nodejs /app/packages/backend/package.json ./

# Copy migration-related files with proper ownership
COPY --from=builder --chown=backend:nodejs /app/packages/backend/scripts ./scripts/
COPY --from=builder --chown=backend:nodejs /app/packages/backend/supabase ./supabase/

# Copy generated types for frontend access with proper ownership
COPY --from=builder --chown=backend:nodejs /app/packages/backend/src/types ./src/types/

# Install tsx for migration script (build-time only)
RUN npm install tsx --no-save

# Create logs directory with proper permissions
RUN mkdir -p /app/logs && \
    chown backend:nodejs /app/logs

# Create startup script that runs migration then starts server
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "🔄 Running database migrations..."' >> /app/start.sh && \
    echo 'npm run db:migrate' >> /app/start.sh && \
    echo 'echo "✅ Database migrations completed successfully"' >> /app/start.sh && \
    echo 'echo "Starting server..."' >> /app/start.sh && \
    echo 'exec node dist/index.js' >> /app/start.sh && \
    chmod +x /app/start.sh && \
    chown backend:nodejs /app/start.sh

USER backend

EXPOSE 3001

ENV NODE_ENV=production
ENV PORT=3001
ENV DOCKER=true

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

ENTRYPOINT ["/sbin/tini", "--"]
CMD ["/app/start.sh"]